h1. play-nTemplate

The __play-nTemplate__ is play module which can be used to render more than one template per request. In a Rich Internet Application(RIA) many times we confront with situation in which you need to do an Ajax request and then refresh some page parts without refreshing all page, by using __play-nTemplate this practice is easy.  

h2. Sample application

p(note). The @sample@ directory contains the @play-nTemplate-sample@ which is a sample application that demonstrates how the @play-nTemplate@ module works.
p(note). To start the sample application just change your current directory to the breadcrumsSample directory and then run the command: @play run@
Then in browser type @http://localhost:9000/@ 

h2. Getting started

p(note). Add the __play-nTemplate__ module dependency to your project and you are ready to go.

h2. Usage

p(note). A nice policy in play is the convention over configuration so I decided to stick with it. As you know in a ply application all html files are stored in

bc. /app/views/

and the html files for each controller in a folder with the same name as the controllers.

Ex:
 
bc. /app/views/MyController/index.html

p(note). In the __index.html__ you might have a couple of zones that you want to refresh via ajax. The html fragments will be stored in the following folder

bc.  /app/views/{controller_name}/fragments

p(note). To benefit from the play-nTemplate module your controller needs to extend __NTemplateController__.

Ex:

bc. public class MyController extends NTemplateController {
 public static void index() {
 	render();
 }
}

p(note). The __index.html__ could look like this:

bc. #{extends 'main.html' /}
#{set title:'Home' /}  


bc. <div id="template1">#{include './fragments/template1.html'/}</div>
<div id="template2">#{include './fragments/template2.html'/}</div>
<div id="template3">#{include './fragments/template3.html'/}</div>

bc. <div>
	<a href="#" data-cfg='{"url" : "@{MyController.index()}", "templates" : ["template3","template4"]}' class="ajaxAware">Refresh</a>
</div>


p(note). The module comes with small jQuery plugin called __jquery.ajaxaware-1.0.js__ which attaches a click event on all elements with __ajajaxAware__ class and will look after a data-cfg property from where it uses the url and the list of templates ids. As I said before the policy is convention over configuration so the template ids which are sent to the server must match with the html elements id and with the name of the html fragment in __/{controller_name}/fragments/__.
In other words if I have a this html

bc. <div id="myDiv">#{include './fragments/myDiv.html'}</div>

and I want to refresh it via Ajax then I need to submit to MyController 

bc. templates=myDiv

then in __myDiv.html__ file should be in the following folder:

bc. /app/views/MyController/myDiv.html

p(note). The controller response will be a JSON string like this

bc. { "myDiv" : "some escaped html"
}

p(note). The response is handled in __jquery.ajaxaware-1.0.js__ and the content of the element with id "myDiv" will be replaced with what I have in the JSON response. 

h2. Thanks

p(note). So guys this is it. I'll continue doing some improvements especially on the JavaScript.
I hope you like it. 